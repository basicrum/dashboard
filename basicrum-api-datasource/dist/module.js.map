{"version":3,"file":"module.js","mappings":"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","sources":["webpack:///external amd \"@grafana/data\"","webpack:///external amd \"@grafana/ui\"","webpack:///external amd \"react\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./datasource.ts","webpack:///./module.ts","webpack:///./components/ConfigEditor.tsx","webpack:///./components/QueryEditor.tsx"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__305__;","module.exports = __WEBPACK_EXTERNAL_MODULE__388__;","module.exports = __WEBPACK_EXTERNAL_MODULE__650__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import {\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  MutableDataFrame,\n  FieldType,\n} from '@grafana/data';\n\nimport { MyQuery, MyDataSourceOptions } from './types';\n\nexport class DataSource extends DataSourceApi<MyQuery, MyDataSourceOptions> {\n  constructor(instanceSettings: DataSourceInstanceSettings<MyDataSourceOptions>) {\n    super(instanceSettings);\n  }\n\n  async query(options: DataQueryRequest<MyQuery>): Promise<DataQueryResponse> {\n    const { range } = options;\n    const from = range!.from.valueOf();\n    const to = range!.to.valueOf();\n\n    // Return a constant for each query.\n    const data = options.targets.map((target) => {\n      return new MutableDataFrame({\n        refId: target.refId,\n        fields: [\n          { name: 'Time', values: [from, to], type: FieldType.time },\n          { name: 'Value', values: [target.constant, target.constant], type: FieldType.number },\n        ],\n      });\n    });\n\n    return { data };\n  }\n\n  async testDatasource() {\n    // Implement a health check for your data source.\n    return {\n      status: 'success',\n      message: 'Success',\n    };\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\nimport { DataSource } from './datasource';\nimport { ConfigEditor } from './components/ConfigEditor';\nimport { QueryEditor } from './components/QueryEditor';\nimport { MyQuery, MyDataSourceOptions } from './types';\n\nexport const plugin = new DataSourcePlugin<DataSource, MyQuery, MyDataSourceOptions>(DataSource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor);\n","import React, { ChangeEvent } from 'react';\nimport { InlineField, Input, SecretInput } from '@grafana/ui';\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { MyDataSourceOptions, MySecureJsonData } from '../types';\n\ninterface Props extends DataSourcePluginOptionsEditorProps<MyDataSourceOptions> {}\n\nexport function ConfigEditor(props: Props) {\n  const { onOptionsChange, options } = props;\n  const onPathChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const jsonData = {\n      ...options.jsonData,\n      path: event.target.value,\n    };\n    onOptionsChange({ ...options, jsonData });\n  };\n\n  // Secure field (only sent to the backend)\n  const onAPIKeyChange = (event: ChangeEvent<HTMLInputElement>) => {\n    onOptionsChange({\n      ...options,\n      secureJsonData: {\n        apiKey: event.target.value,\n      },\n    });\n  };\n\n  const onResetAPIKey = () => {\n    onOptionsChange({\n      ...options,\n      secureJsonFields: {\n        ...options.secureJsonFields,\n        apiKey: false,\n      },\n      secureJsonData: {\n        ...options.secureJsonData,\n        apiKey: '',\n      },\n    });\n  };\n\n  const { jsonData, secureJsonFields } = options;\n  const secureJsonData = (options.secureJsonData || {}) as MySecureJsonData;\n\n  return (\n    <div className=\"gf-form-group\">\n      <InlineField label=\"Path\" labelWidth={12}>\n        <Input\n          onChange={onPathChange}\n          value={jsonData.path || ''}\n          placeholder=\"json field returned to frontend\"\n          width={40}\n        />\n      </InlineField>\n      <InlineField label=\"API Key\" labelWidth={12}>\n        <SecretInput\n          isConfigured={(secureJsonFields && secureJsonFields.apiKey) as boolean}\n          value={secureJsonData.apiKey || ''}\n          placeholder=\"secure json field (backend only)\"\n          width={40}\n          onReset={onResetAPIKey}\n          onChange={onAPIKeyChange}\n        />\n      </InlineField>\n    </div>\n  );\n}\n","import React, { ChangeEvent } from 'react';\nimport { InlineField, Input } from '@grafana/ui';\nimport { QueryEditorProps } from '@grafana/data';\nimport { DataSource } from '../datasource';\nimport { MyDataSourceOptions, MyQuery } from '../types';\n\ntype Props = QueryEditorProps<DataSource, MyQuery, MyDataSourceOptions>;\n\nexport function QueryEditor({ query, onChange, onRunQuery }: Props) {\n  const onQueryTextChange = (event: ChangeEvent<HTMLInputElement>) => {\n    onChange({ ...query, queryText: event.target.value });\n  };\n\n  const onConstantChange = (event: ChangeEvent<HTMLInputElement>) => {\n    onChange({ ...query, constant: parseFloat(event.target.value) });\n    // executes the query\n    onRunQuery();\n  };\n\n  const { queryText, constant } = query;\n\n  return (\n    <div className=\"gf-form\">\n      <InlineField label=\"Constant\">\n        <Input onChange={onConstantChange} value={constant} width={8} type=\"number\" step=\"0.1\" />\n      </InlineField>\n      <InlineField label=\"Query Text\" labelWidth={16} tooltip=\"Not used yet\">\n        <Input onChange={onQueryTextChange} value={queryText || ''} />\n      </InlineField>\n    </div>\n  );\n}\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__305__","__WEBPACK_EXTERNAL_MODULE__388__","__WEBPACK_EXTERNAL_MODULE__650__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","DataSource","DataSourceApi","query","options","range","from","valueOf","to","data","targets","map","target","MutableDataFrame","refId","fields","name","values","type","FieldType","time","constant","number","testDatasource","status","message","constructor","instanceSettings","super","plugin","DataSourcePlugin","setConfigEditor","props","onOptionsChange","jsonData","secureJsonFields","secureJsonData","div","className","InlineField","label","labelWidth","Input","onChange","event","path","placeholder","width","SecretInput","isConfigured","apiKey","onReset","setQueryEditor","onRunQuery","queryText","parseFloat","step","tooltip"],"sourceRoot":""}